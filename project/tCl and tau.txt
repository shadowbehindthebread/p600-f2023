# imports
import numpy as np
import matplotlib
from matplotlib import pyplot as plt, ticker as mticker
import numpy as np
from classy import Class
from scipy.optimize import fsolve
import math
import scienceplots
plt.style.use(['science','notebook'])
font = {'size': 22,'family':'STIXGeneral'}
matplotlib.rc('font',**font)

# Varying parameter (others fixed to default)
var_min = 0.005
var_max = 0.205 # up to 0.125 in Baumann
var_num = 5

# Fixed settings
common_settings = {'output':'mPk,tCl','h':0.674,'YHe':0.245,'P_k_max_1/Mpc':1.0,'Omega_m':0.315,'Omega_b':0.0493} # values taken from Baumann C.2.3

# Loop over varying parameter values
cosmo = {}

for i in range(var_num):
	tau = var_min + (var_max-var_min)*i/(var_num-1.)
	A_s = (2.198e-9)*math.exp(-2*tau)/math.exp(-2*0.056) # put tau into the A_s term, normalize to measured A_s value
	cosmo[i] = Class() # call CLASS
	cosmo[i].set(common_settings)
	cosmo[i].set({'A_s':A_s})
	cosmo[i].compute()

# Create figures
fig_Cl, ax_Cl = plt.subplots()

# Loop over varying parameter values
tCl = {} # temp

for i in range(var_num):
	# Deal with varying parameters (for the legend)
	tau = var_min + (var_max-var_min)*i/(var_num-1.)
	tCl[i] = [] # temp
	cl = cosmo[i].raw_cl()
	l = cl['ell']
	ax_Cl.semilogx(l, l*(l+1)/(2.*math.pi)*cl['tt']*10.e12,label=r'$\tau$ = %g' % tau) #multiply by 10^12 bc units of uK^2	

ax_Cl.set_xlim([2,2.5e3])
ax_Cl.xaxis.set_major_formatter(mticker.ScalarFormatter())
ax_Cl.set_xlabel(r'multipole moment $\ell$') 
ax_Cl.set_ylabel(r'$\ell(\ell+1)C_{\ell}^{TT}/2\pi[\mu K^2]$')
ax_Cl.legend()
fig_Cl.tight_layout()
plt.show() 
fig_Cl.savefig('Cl_and_tau_final.svg')